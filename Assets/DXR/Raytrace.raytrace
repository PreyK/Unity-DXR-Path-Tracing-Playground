
#include "common.cginc"

// texture to store raytracing result
RWTexture2D<float4> _DxrTarget;

Texture2D<float4> _SkyboxTexture;
SamplerState sampler_SkyboxTexture;
//static const float PI = 3.14159265f;

float3 _TopLeftFrustumDir;
float3 _TopRightFrustumDir;
float3 _BottomLeftFrustumDir;
float3 _BottomRightFrustumDir;

float4 _SkyColor;
float4 _GroundColor;
float _skyExposure;

float3 _CameraPos;

int _RaysPerPixel;
int _FrameIndex;



#define RAYTRACING_OPAQUE_FLAG      0x0f
#define RAYTRACING_TRANSPARENT_FLAG 0xf0

#pragma max_recursion_depth 8

[shader("raygeneration")]
void MyRaygenShader()
{
    	// start one ray per pixel

	// current pixel
	uint2 dispatchIdx = DispatchRaysIndex().xy;
	// target resolution
	uint2 launchDim = DispatchRaysDimensions().xy;
	
	// init random seed from current pixel location and frame index
	uint seed = initRand(dispatchIdx.x + dispatchIdx.y * launchDim.x, _FrameIndex);
	//uint seed = initRand((dispatchIdx.x + dispatchIdx.y * launchDim.x) * _FrameIndex * 2);

	// get random uv inside current pixel
	// this will give us anti-aliasing for free
	float2 uv = ((float2)dispatchIdx + float2(nextRand(seed), nextRand(seed))) / (float2)launchDim;
	
	// translate screen uv to ray direction
	float3 topHorizontalRayDir = lerp(_TopLeftFrustumDir, _TopRightFrustumDir, uv.x);
	float3 bottomHorizontalRayDir = lerp(_BottomLeftFrustumDir, _BottomRightFrustumDir, uv.x);
	float3 rayDir = normalize(lerp(bottomHorizontalRayDir, topHorizontalRayDir, uv.y));

	// init ray decriptor
	RayDesc rayDesc;
	rayDesc.Origin = _CameraPos; // start at camera position
	rayDesc.Direction = rayDir;
	rayDesc.TMin = 0;
	rayDesc.TMax = 100;

	// Create and init the ray payload

	RayPayload rayPayload;
	rayPayload.color = float3(0.0, 0.0, 0.0);
	rayPayload.randomSeed = seed;
	rayPayload.depth = 0;
	rayPayload.energy = float3(1.0,1.0, 1.0);




	//multiray (WIP)
/*
	for (int i = 0; i < 10; i++)
		{
			//todo: new random, new accumulation
			rayPayload.randomSeed =initRand(dispatchIdx.x + dispatchIdx.y * launchDim.x, i*_FrameIndex);
			TraceRay(_RaytracingAccelerationStructure, RAY_FLAG_NONE, RAYTRACING_OPAQUE_FLAG, 0, 1, 0, rayDesc, rayPayload);
			float3 color = rayPayload.color;
			_DxrTarget[dispatchIdx] = float4(color, 1);	
		}
*/
	// shoot primary ray	
	// store result
	//float3 color = rayPayload.color;
	//_DxrTarget[dispatchIdx] = float4(color, 1);	


	//one ray
	rayPayload.randomSeed =initRand(dispatchIdx.x + dispatchIdx.y * launchDim.x, _FrameIndex);
	TraceRay(_RaytracingAccelerationStructure, RAY_FLAG_NONE, RAYTRACING_OPAQUE_FLAG, 0, 1, 0, rayDesc, rayPayload);
	float3 color = rayPayload.color;
	_DxrTarget[dispatchIdx] = float4(color, 1);	
	
}

// "back up" closest hit shader. it is used when we hit material without raytracing shader pass
[shader("closesthit")]
void ClosestHitMain(inout RayPayload rayPayload : SV_RayPayload, AttributeData attributeData : SV_IntersectionAttributes)
{
	rayPayload.color = float3(200, 0.0, 0.5);
}

// miss shader, used when we don't hit any geometry

[shader("miss")]
void MissShader(inout RayPayload rayPayload : SV_RayPayload)
{

    //skybox
    float3 rayDir = WorldRayDirection();
    float theta = acos(rayDir.y) / -PI;
    float phi = atan2(rayDir.x, -rayDir.z) / -PI * 0.5f;
	rayPayload.energy = float3(0, 0, 0);
    rayPayload.color = _SkyboxTexture.SampleLevel(sampler_SkyboxTexture, float2(phi, theta), 0)*_skyExposure;
    //Result[id.xy] = _SkyboxTexture.SampleLevel(sampler_SkyboxTexture, float2(phi, theta), 0);

	//rayPayload.color = float3(1, 0, 0);



	// return gradient background color
	//float3 rayDir = WorldRayDirection();
	//rayPayload.color = lerp(_GroundColor, _SkyColor, rayDir.y * 0.5 + 0.5);	
}
